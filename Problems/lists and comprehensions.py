# PROBLEM 3 (Shuffle - 8pts)
# A playing card consists of a suit (Heart, Diamond, Club, Spade) and a value (2,3,4,5,6,7,8,9,10,J,Q,K,A).
# Create a list of all possible playing cards, which is a deck.
# Then create a function that shuffles the deck, producing a random order. Print the random deck.
# Then deal yourself a hand of 5 cards off the top.  Print the hand.  Print the remaining deck.
import random

suits = ["S", "C", "H", "D"]
cards = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]


def shuffle(deck):
    new_deck = []
    while len(deck) > 0:
        card = deck.pop(random.randrange(len(deck)))
        new_deck.append(card)
    return new_deck


deck = []
for card in cards:
    for suit in suits:
        deck.append(card + suit)

print(deck)

new_deck = shuffle(deck)
print(new_deck)
print(len(new_deck))

random.shuffle(new_deck)
print(new_deck)

decode_me = [[[' ', 1], ['#', 8], [' ', 1], ['#', 8], [' ', 5], ['#', 3], [' ', 4], ['#', 2], [' ', 4], ['#', 2], [' ', 2], ['#', 6], [' ', 2], ['#', 4], [' ', 2], ['#', 6]], [[' ', 1], ['#', 2], [' ', 7], ['#', 2], [' ', 5], ['#', 2], [' ', 3], ['#', 2], [' ', 1], ['#', 2], [' ', 3], ['#', 3], [' ', 3], ['#', 2], [' ', 1], ['#', 2], [' ', 4], ['#', 2], [' ', 2], ['#', 2], [' ', 2], ['#', 2], [' ', 4], ['#', 2]], [[' ', 1], ['#', 2], [' ', 7], ['#', 2], [' ', 5], ['#', 2], [' ', 2], ['#', 2], [' ', 3], ['#', 2], [' ', 2], ['#', 4], [' ', 2], ['#', 2], [' ', 1], ['#', 2], [' ', 8], ['#', 2], [' ', 2], ['#', 2]], [[' ', 1], ['#', 6], [' ', 3], ['#', 8], [' ', 2], ['#', 2], [' ', 5], ['#', 2], [' ', 1], ['#', 2], [' ', 1], ['#', 2], [' ', 1], ['#', 2], [' ', 1], ['#', 2], [' ', 8], ['#', 2], [' ', 3], ['#', 6]], [[' ', 1], ['#', 2], [' ', 7], ['#', 2], [' ', 3], ['#', 2], [' ', 3], ['#', 9], [' ', 1], ['#', 2], [' ', 2], ['#', 4], [' ', 1], ['#', 2], [' ', 8], ['#', 2], [' ', 8], ['#', 2]], [[' ', 1], ['#', 2], [' ', 7], ['#', 2], [' ', 4], ['#', 2], [' ', 2], ['#', 2], [' ', 5], ['#', 2], [' ', 1], ['#', 2], [' ', 3], ['#', 3], [' ', 1], ['#', 2], [' ', 4], ['#', 2], [' ', 2], ['#', 2], [' ', 2], ['#', 2], [' ', 4], ['#', 2]], [[' ', 1], ['#', 2], [' ', 7], ['#', 2], [' ', 5], ['#', 2], [' ', 1], ['#', 2], [' ', 5], ['#', 2], [' ', 1], ['#', 2], [' ', 4], ['#', 2], [' ', 2], ['#', 6], [' ', 2], ['#', 4], [' ', 2], ['#', 6]], [[' ', 1], ['#', 8], [' ', 5], ['#', 3], [' ', 4], ['#', 8], [' ', 2], ['#', 2], [' ', 4], ['#', 2], [' ', 1], ['#', 8], [' ', 1], ['#', 8]], [[' ', 1], ['#', 2], [' ', 5], ['#', 2], [' ', 3], ['#', 2], [' ', 1], ['#', 2], [' ', 3], ['#', 2], [' ', 5], ['#', 2], [' ', 1], ['#', 2], [' ', 3], ['#', 2], [' ', 2], ['#', 2], [' ', 7], ['#', 2], [' ', 5], ['#', 2]], [[' ', 1], ['#', 2], [' ', 5], ['#', 2], [' ', 2], ['#', 2], [' ', 3], ['#', 2], [' ', 2], ['#', 2], [' ', 5], ['#', 2], [' ', 1], ['#', 2], [' ', 2], ['#', 2], [' ', 3], ['#', 2], [' ', 7], ['#', 2], [' ', 5], ['#', 2]], [[' ', 1], ['#', 8], [' ', 2], ['#', 2], [' ', 5], ['#', 2], [' ', 1], ['#', 8], [' ', 2], ['#', 5], [' ', 4], ['#', 6], [' ', 3], ['#', 8]], [[' ', 1], ['#', 2], [' ', 8], ['#', 9], [' ', 1], ['#', 2], [' ', 3], ['#', 2], [' ', 3], ['#', 2], [' ', 2], ['#', 2], [' ', 3], ['#', 2], [' ', 7], ['#', 2], [' ', 3], ['#', 2]], [[' ', 1], ['#', 2], [' ', 8], ['#', 2], [' ', 5], ['#', 2], [' ', 1], ['#', 2], [' ', 4], ['#', 2], [' ', 2], ['#', 2], [' ', 3], ['#', 2], [' ', 2], ['#', 2], [' ', 7], ['#', 2], [' ', 4], ['#', 2]], [[' ', 1], ['#', 2], [' ', 8], ['#', 2], [' ', 5], ['#', 2], [' ', 1], ['#', 2], [' ', 5], ['#', 2], [' ', 1], ['#', 2], [' ', 4], ['#', 2], [' ', 1], ['#', 8], [' ', 1], ['#', 2], [' ', 5], ['#', 2]]]


for line in decode_me:
    for mark in line:
        print(mark)